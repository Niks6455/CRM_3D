import { useEffect, useState } from "react";
import styles from "./HistoryModule.module.scss";
import { GetAllOrders, UpdateOrderStatus } from "../../API/API"; 
import Layout from "../../ui/Layout/Layout";

const STATUS_TRANSLATIONS = {
    pending: "–û–∂–∏–¥–∞–µ—Ç",
    processing: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
    completed: "–ó–∞–≤–µ—Ä—à–µ–Ω",
    canceled: "–û—Ç–º–µ–Ω–µ–Ω"
};

const STATUS_STYLES = {
    pending: styles.pending,
    processing: styles.inProgress,
    completed: styles.completed,
    canceled: styles.canceled
};

function HistoryModule() {
    const [dataOrders, setDataOrders] = useState([]);
    const [searchQuery, setSearchQuery] = useState("");
    const [editingOrderId, setEditingOrderId] = useState(null);
    const [selectedStatus, setSelectedStatus] = useState(null);
    const userData = JSON.parse(sessionStorage.getItem("userData"))?.user;
    const isAdmin = userData?.role === 2;  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

    useEffect(() => {
        getData();
    }, []);

    const getData = () => {
        GetAllOrders().then((resp) => {
            if (resp?.status === 200) {
                setDataOrders(resp.data);
            }
        });
    };

    const activeOrders = dataOrders.filter(order => order.status === "pending" || order.status === "processing");
    const historyOrders = dataOrders.filter(order => order.status === "completed" || order.status === "canceled");

    const filterOrders = (orders) => {
        return orders.filter(order =>
            order.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
            order.phoneNumber.includes(searchQuery) ||
            order.User.fio.toLowerCase().includes(searchQuery.toLowerCase()) ||
            order.User.email.toLowerCase().includes(searchQuery.toLowerCase())
        );
    };

    const handleStatusChange = (orderId, newStatus) => {
        const data = {
            orderId: orderId,
            status: newStatus
        };

        UpdateOrderStatus(data).then((resp) => {
            if (resp?.status === 200) {
                getData();
                setEditingOrderId(null);  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            }
        });
    };

    const handleStatusClick = (e, orderId, currentStatus) => {
        if (editingOrderId === orderId && e.target.tagName === "TD") {
            setEditingOrderId(null);  // –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ —Ç–æ–π –∂–µ —è—á–µ–π–∫–µ
        } else {
            setEditingOrderId(orderId);
            setSelectedStatus(currentStatus);  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    };

    return (
        <section className={styles.HistoryModule}>
            <Layout>
                <h2>–ó–∞–∫–∞–∑—ã</h2>

                <input
                    type="text"
                    placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–∫–∞–∑–∞–º..."
                    className={styles.searchInput}
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                />

                <div className={styles.tablesContainer}>
                    <div>
                        <h3>üìå –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã</h3>
                        <table className={styles.table}>
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
                                    <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                                    <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                                    <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                                    <th>–ü—Ä–æ–¥—É–∫—Ç—ã</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                </tr>
                            </thead>
                            <tbody>
                                {!filterOrders(activeOrders).length ? (
                                    <tr>
                                        <td colSpan="7">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω—ã</td>
                                    </tr>
                                ) : (
                                    <>
                                        {filterOrders(activeOrders).map((order) => (
                                            <tr key={order.id}>
                                                <td>{order.id}</td>
                                                <td>{order.description}</td>
                                                <td>{order.phoneNumber}</td>
                                                <td>{new Date(order.createdAt).toLocaleString()}</td>
                                                <td>{order.User.fio} ({order.User.email})</td>
                                                <td>
                                                    <ul>
                                                        {order.Products.map((product) => (
                                                            <li key={product.id}>
                                                                {product.name} - {product.OrderProduct.quantity} —à—Ç. {isAdmin && `(Id: ${product.id})`}
                                                            </li>
                                                        ))}
                                                    </ul>
                                                </td>
                                                <td
                                                    className={STATUS_STYLES[order.status]}
                                                    onClick={(e) => isAdmin && handleStatusClick(e, order.id, order.status)}
                                                >
                                                    {editingOrderId === order.id ? (
                                                        <select
                                                            value={selectedStatus}
                                                            onChange={(e) => setSelectedStatus(e.target.value)}
                                                            onBlur={() => handleStatusChange(order.id, selectedStatus)}
                                                            autoFocus
                                                        >
                                                            <option value="pending">–û–∂–∏–¥–∞–µ—Ç</option>
                                                            <option value="processing">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                                                            <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω</option>
                                                            <option value="canceled">–û—Ç–º–µ–Ω–µ–Ω</option>
                                                        </select>
                                                    ) : (
                                                        STATUS_TRANSLATIONS[order.status]
                                                    )}
                                                </td>
                                            </tr>
                                        ))}
                                    </>
                                )}
                            </tbody>
                        </table>
                    </div>

                    <div>
                        <h3>üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</h3>
                        <table className={styles.table}>
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
                                    <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                                    <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                                    <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                                    <th>–ü—Ä–æ–¥—É–∫—Ç—ã</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                </tr>
                            </thead>
                            <tbody>
                                {historyOrders.length === 0 ? (
                                    <tr>
                                        <td colSpan="7">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω—ã</td>
                                    </tr>
                                ) : (
                                    <>
                                        {filterOrders(historyOrders).map((order) => (
                                            <tr key={order.id}>
                                                <td>{order.id}</td>
                                                <td>{order.description}</td>
                                                <td>{order.phoneNumber}</td>
                                                <td>{new Date(order.createdAt).toLocaleString()}</td>
                                                <td>{order.User.fio} ({order.User.email})</td>
                                                <td>
                                                    <ul>
                                                        {order.Products.map((product) => (
                                                            <li key={product.id}>
                                                                {product.name} - {product.OrderProduct.quantity} —à—Ç. {isAdmin && `(Id: ${product.id})`}
                                                            </li>
                                                        ))}
                                                    </ul>
                                                </td>
                                                <td className={STATUS_STYLES[order.status]}>
                                                    {STATUS_TRANSLATIONS[order.status]}
                                                </td>
                                            </tr>
                                        ))}
                                    </>
                                )}
                            </tbody>
                        </table>
                    </div>
                </div>
            </Layout>
        </section>
    );
}

export default HistoryModule;
